{"version":3,"file":"next.js","sources":["../src/next.ts"],"sourcesContent":["import { FilteredResponseQueryOptions, SanityClient } from 'next-sanity';\n\nimport { getAllPageMetadata } from './helpers/page-tree';\nimport { getAllRawPageMetadataQuery } from './queries';\nimport { PageMetadata, PageTreeConfig } from './types';\n\nexport type { PageMetadata } from './types';\n\nexport type NextPageTreeClientOptions = {\n  config: PageTreeConfig;\n  client: SanityClient;\n  fetchOptions?: FilteredResponseQueryOptions;\n};\n\nexport const createNextPageTreeClient = ({ config, client, fetchOptions }: NextPageTreeClientOptions) => {\n  return new NextPageTreeClient(config, client, fetchOptions);\n};\n\nclass NextPageTreeClient {\n  private readonly config: PageTreeConfig;\n  private readonly client: SanityClient;\n  private readonly defaultSanityFetchOptions?: FilteredResponseQueryOptions;\n\n  constructor(config: PageTreeConfig, client: SanityClient, defaultSanityFetchOptions?: FilteredResponseQueryOptions) {\n    this.config = config;\n    this.client = client;\n    this.defaultSanityFetchOptions = defaultSanityFetchOptions;\n  }\n\n  public async getAllPageMetadata(): Promise<PageMetadata[]> {\n    const rawPageMetadata = await this.client.fetch(\n      getAllRawPageMetadataQuery(this.config),\n      undefined,\n      this.defaultSanityFetchOptions ?? {},\n    );\n    return getAllPageMetadata(this.config, rawPageMetadata);\n  }\n\n  public async getPageMetadataById(id: string): Promise<PageMetadata | undefined> {\n    const pageMetadatas = await this.getAllPageMetadata();\n    return pageMetadatas.find(page => page._id === id);\n  }\n\n  public async getPageMetadataByPath(path: string): Promise<PageMetadata | undefined> {\n    const pageMetadatas = await this.getAllPageMetadata();\n    return pageMetadatas.find(page => page.path === path);\n  }\n}\n"],"names":["createNextPageTreeClient","_ref","config","client","fetchOptions","NextPageTreeClient","constructor","defaultSanityFetchOptions","__publicField","getAllPageMetadata","_a","rawPageMetadata","fetch","getAllRawPageMetadataQuery","getPageMetadataById","id","pageMetadatas","find","page","_id","getPageMetadataByPath","path"],"mappings":";;;;;;;;;;;;;;;;;AAcO,MAAMA,2BAA2BC,IAAA,IAAiE;EAAA,IAAhE;IAAEC,MAAQ;IAAAC,MAAA;IAAQC;GAA8C,GAAAH,IAAA;EACvG,OAAO,IAAII,kBAAA,CAAmBH,MAAQ,EAAAC,MAAA,EAAQC,YAAY,CAAA;AAC5D,CAAA;AAEA,MAAMC,kBAAmB,CAAA;EAKvBC,WAAAA,CAAYJ,MAAwB,EAAAC,MAAA,EAAsBI,yBAA0D,EAAA;IAJnGC,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACAA,aAAA,CAAA,IAAA,EAAA,2BAAA,CAAA;IAGf,IAAA,CAAKN,MAAS,GAAAA,MAAA;IACd,IAAA,CAAKC,MAAS,GAAAA,MAAA;IACd,IAAA,CAAKI,yBAA4B,GAAAA,yBAAA;EACnC;EAEA,MAAaE,kBAA8CA,CAAA,EAAA;IA7B7D,IAAAC,EAAA;IA8BU,MAAAC,eAAA,GAAkB,MAAM,IAAA,CAAKR,MAAO,CAAAS,KAAA,CACxCC,KAAA,CAAAA,0BAAA,CAA2B,KAAKX,MAAM,CAAA,EACtC,KAAA,CAAA,EACA,CAAAQ,EAAA,GAAA,IAAA,CAAKH,yBAAL,KAAA,IAAA,GAAAG,EAAA,GAAkC,CAAC,CAAA,CACrC;IACO,OAAAD,wBAAA,CAAmB,IAAK,CAAAP,MAAA,EAAQS,eAAe,CAAA;EACxD;EAEA,MAAaG,oBAAoBC,EAA+C,EAAA;IACxE,MAAAC,aAAA,GAAgB,MAAM,IAAA,CAAKP,kBAAmB,EAAA;IACpD,OAAOO,aAAc,CAAAC,IAAA,CAAaC,IAAA,IAAAA,IAAA,CAAKC,QAAQJ,EAAE,CAAA;EACnD;EAEA,MAAaK,sBAAsBC,IAAiD,EAAA;IAC5E,MAAAL,aAAA,GAAgB,MAAM,IAAA,CAAKP,kBAAmB,EAAA;IACpD,OAAOO,aAAc,CAAAC,IAAA,CAAaC,IAAA,IAAAA,IAAA,CAAKG,SAASA,IAAI,CAAA;EACtD;AACF;"}