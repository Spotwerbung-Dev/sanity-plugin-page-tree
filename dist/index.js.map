{"version":3,"file":"index.js","sources":["../src/hooks/usePageTree.ts","../src/hooks/usePageTreeConfig.tsx","../src/helpers/uuid.ts","../src/components/PageTreeViewItemActions.tsx","../src/components/PageTreeViewItemStatus.tsx","../src/components/PageTreeViewItem.tsx","../src/components/PageTreeEditor.tsx","../src/components/PageTreeView.tsx","../src/hooks/useOptimisticState.ts","../src/components/PageTreeInput.tsx","../src/components/PageTreeField.tsx","../src/hooks/usePageTreeItem.ts","../src/components/SlugField.tsx","../src/validators/parent-validator.ts","../src/validators/slug-validator.ts","../src/schema/definePageType.ts","../src/index.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useListeningQuery } from 'sanity-plugin-utils';\n\nimport { mapRawPageMetadatasToPageTree } from '../helpers/page-tree';\nimport { getAllRawPageMetadataQuery } from '../queries';\nimport { PageTreeConfig, RawPageMetadata } from '../types';\n\nexport const usePageTree = (config: PageTreeConfig) => {\n  const { data, loading } = useListeningQuery<RawPageMetadata[]>(getAllRawPageMetadataQuery(config), {\n    options: { apiVersion: config.apiVersion },\n  });\n\n  const pageTree = useMemo(() => (data ? mapRawPageMetadatasToPageTree(config, data) : undefined), [config, data]);\n\n  return {\n    isLoading: loading,\n    pageTree,\n  };\n};\n","import { createContext, PropsWithChildren, useContext } from 'react';\n\nimport { PageTreeConfig } from '../types';\n\nconst PageTreeConfigContext = createContext<{ config?: PageTreeConfig }>({});\n\nexport type PageTreeConfigProviderProps = {\n  config: PageTreeConfig;\n};\n\nexport const PageTreeConfigProvider = ({ children, config }: PropsWithChildren<PageTreeConfigProviderProps>) => (\n  <PageTreeConfigContext.Provider value={{ config }}>{children}</PageTreeConfigContext.Provider>\n);\n\nexport const usePageTreeConfig = () => {\n  const { config } = useContext(PageTreeConfigContext);\n\n  if (!config) {\n    throw new Error('Failed to get page tree config. Make sure to use the component in a PageTreeConfigProvider.');\n  }\n\n  return config;\n};\n","import { uuid } from '@sanity/uuid';\n\nexport const generateDraftId = () => `drafts.${uuid()}`;\n","import { AddIcon } from '@sanity/icons';\nimport { Box, Button, Flex, Menu, MenuButton, MenuItem, Text, Tooltip } from '@sanity/ui';\nimport { useEffect, useState } from 'react';\nimport { useClient, useSchema } from 'sanity';\nimport { useRouter } from 'sanity/router';\n\nimport { getLanguageFieldName } from '../helpers/config';\nimport { generateDraftId } from '../helpers/uuid';\nimport { usePageTreeConfig } from '../hooks/usePageTreeConfig';\nimport { PageTreeItem } from '../types';\n\nexport type PageTreeViewItemActionsProps = {\n  page: PageTreeItem;\n  onActionOpen: () => void;\n  onActionClose: () => void;\n};\n\nexport const PageTreeViewItemActions = ({ page, onActionOpen, onActionClose }: PageTreeViewItemActionsProps) => {\n  const schema = useSchema();\n  const config = usePageTreeConfig();\n  const client = useClient({ apiVersion: config.apiVersion });\n  const { navigateUrl, resolveIntentLink } = useRouter();\n  const [newPage, setNewPage] = useState<{ _id: string; _type: string } | undefined>();\n\n  const onAdd = async (type: string) => {\n    const language = getLanguageFieldName(config);\n    const doc = await client.create({\n      _id: generateDraftId(),\n      _type: type,\n      parent:\n        config.rootSchemaType === type\n          ? undefined\n          : {\n              _type: 'reference',\n              _ref: page._id,\n              _weak: true,\n              _strengthenOnPublish: { type: page._type },\n            },\n      ...(language ? { [language]: page[language] } : {}),\n    });\n    setNewPage(doc);\n  };\n\n  useEffect(() => {\n    if (newPage) {\n      const path = resolveIntentLink('edit', { id: newPage._id, type: newPage._type });\n      navigateUrl({ path });\n    }\n  }, [newPage, navigateUrl, resolveIntentLink]);\n\n  const menuButtons = config.pageSchemaTypes\n    .filter(\n      type =>\n        type !== config.rootSchemaType &&\n        (config.allowedParents?.[type] === undefined || config.allowedParents?.[type]?.includes(page._type)),\n    )\n    .map(type => (\n      <MenuItem key={type} onClick={() => onAdd(type)} text={schema.get(type)?.title ?? type} value={type} />\n    ));\n\n  const isAddPageButtonDisabled = menuButtons.length === 0;\n  const tooltipContent = isAddPageButtonDisabled ? (\n    <Box padding={1}>\n      <Text muted size={1}>\n        This page cannot have any child pages.\n      </Text>\n    </Box>\n  ) : undefined;\n\n  return (\n    <Tooltip content={tooltipContent} fallbackPlacements={['right', 'left']} placement=\"top\" portal>\n      <Flex gap={1} style={{ flexShrink: 0 }} onClick={e => e.stopPropagation()}>\n        <MenuButton\n          id=\"add-page-button\"\n          button={\n            <Button\n              mode=\"ghost\"\n              paddingX={2}\n              paddingY={2}\n              fontSize={1}\n              icon={AddIcon}\n              disabled={isAddPageButtonDisabled}\n            />\n          }\n          menu={<Menu>{menuButtons}</Menu>}\n          popover={{ placement: 'bottom' }}\n          onOpen={onActionOpen}\n          onClose={onActionClose}\n        />\n      </Flex>\n    </Tooltip>\n  );\n};\n","import { EditIcon, PublishIcon } from '@sanity/icons';\nimport { Box, Flex, Text, Tooltip, TooltipProps, useTheme } from '@sanity/ui';\nimport styled from 'styled-components';\n\nexport type PageTreeViewItemStatusProps = {\n  isPublished: boolean;\n  isDraft: boolean;\n};\n\nconst TOOLTIP_PROPS: Partial<TooltipProps> = {\n  fallbackPlacements: ['right', 'left'],\n  placement: 'top',\n  portal: true,\n};\n\nexport const PageTreeViewItemStatus = ({ isPublished, isDraft }: PageTreeViewItemStatusProps) => {\n  const theme = useTheme();\n\n  return (\n    <Flex gap={2} style={{ flexShrink: 0 }}>\n      <Tooltip\n        content={\n          <Box padding={2}>\n            <Text muted size={1}>\n              {isPublished ? 'Published' : 'Not published'}\n            </Text>\n          </Box>\n        }\n        {...TOOLTIP_PROPS}>\n        <OpacityBox opacity={isPublished ? 1 : 0.3}>\n          <PublishIcon fontSize={21} color={isPublished ? theme.sanity.color.muted.positive.enabled.fg : undefined} />\n        </OpacityBox>\n      </Tooltip>\n      <Tooltip\n        content={\n          <Box padding={2}>\n            <Text muted size={1}>\n              {isDraft ? 'Edited' : 'No unpublished edits'}\n            </Text>\n          </Box>\n        }\n        {...TOOLTIP_PROPS}>\n        <OpacityBox opacity={isDraft ? 1 : 0.3}>\n          <EditIcon fontSize={21} color={isDraft ? theme.sanity.color.muted.caution.enabled.fg : undefined} />\n        </OpacityBox>\n      </Tooltip>\n    </Flex>\n  );\n};\n\nconst OpacityBox = styled(Box)<{ opacity: number }>`\n  opacity: ${props => props.opacity};\n`;\n","import { ChevronDownIcon, ChevronUpIcon } from '@sanity/icons';\nimport { Button, Card, Flex, Stack, Text } from '@sanity/ui';\nimport { MouseEvent } from 'react';\nimport { useMemo, useState } from 'react';\nimport { usePaneRouter } from 'sanity/structure';\nimport styled from 'styled-components';\n\nimport { getLanguageFieldName, getRootPageSlug } from '../helpers/config';\nimport { flatMapPageTree } from '../helpers/page-tree';\nimport { usePageTreeConfig } from '../hooks/usePageTreeConfig';\nimport { NestedPageTreeItem } from '../types';\nimport { PageTreeViewItemActions } from './PageTreeViewItemActions';\nimport { PageTreeViewItemStatus } from './PageTreeViewItemStatus';\n\nexport type PageTreeViewItemProps = {\n  parentPath?: string;\n  page: NestedPageTreeItem;\n  onToggle: (page: NestedPageTreeItem) => void;\n  onClick?: (page: NestedPageTreeItem) => void;\n  openItemIds: string[];\n  disabledItemIds?: string[];\n  forceOpen?: boolean;\n  isRoot?: boolean;\n  allowedPageTypes?: string[];\n};\n\nexport const PageTreeViewItem = ({\n  page,\n  parentPath,\n  onToggle,\n  onClick,\n  openItemIds,\n  disabledItemIds,\n  allowedPageTypes,\n  forceOpen,\n  isRoot,\n}: PageTreeViewItemProps) => {\n  const config = usePageTreeConfig();\n  const { navigateIntent, routerPanesState, groupIndex } = usePaneRouter();\n\n  const [isHovered, setIsHovered] = useState(false);\n  const [hasActionOpen, setHasActionOpen] = useState(false);\n  const toggle = (e: MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    onToggle(page);\n  };\n\n  const onItemClick = () => {\n    if (isDisabled) return;\n\n    onClick ? onClick(page) : openPage();\n  };\n\n  const openPage = () => {\n    navigateIntent('edit', { id: page._id, type: page._type });\n  };\n\n  const path = parentPath ? `${parentPath}/${page.slug?.current}` : getLanguageFieldName(config) ?? '/';\n  const hasChildren = page.children.length > 0;\n\n  const currentPageNumber = routerPanesState[groupIndex + 1]?.[0]?.id;\n  const isSelected = currentPageNumber === page._id;\n  const isDisabled =\n    ((allowedPageTypes && !allowedPageTypes.includes(page._type)) ||\n      (disabledItemIds && disabledItemIds.some(id => id === page._id))) ??\n    false;\n\n  /**\n   * Check if page or is open based on passed openItemIds and page id and children ids\n   */\n  const isOpen = useMemo(() => {\n    if (forceOpen) {\n      return true;\n    }\n\n    const flatPages = page.children ? flatMapPageTree(page.children) : [];\n    const flatPageIds = [page._id, ...flatPages.map(p => p._id)];\n\n    return openItemIds.some(id => flatPageIds.includes(id));\n  }, [page._id, page.children, forceOpen, openItemIds]);\n\n  return (\n    <Card>\n      <Stack flex={1}>\n        <ItemContainer align=\"center\" gap={1}>\n          {!isRoot && <HorizontalLine />}\n          <Flex paddingLeft={3}>\n            {hasChildren && (\n              <Button\n                mode=\"ghost\"\n                padding={2}\n                fontSize={1}\n                icon={isOpen ? ChevronUpIcon : ChevronDownIcon}\n                onClick={toggle}\n                disabled={forceOpen}\n              />\n            )}\n          </Flex>\n          <Item\n            flex={1}\n            paddingLeft={1}\n            align=\"center\"\n            gap={3}\n            justify=\"space-between\"\n            hasMarginLeft={hasChildren}\n            isDisabled={isDisabled}\n            isSelected={isHovered || isSelected}\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n            onClick={onItemClick}>\n            <Flex align=\"center\" gap={3}>\n              <UrlText isDisabled={isDisabled} textOverflow=\"ellipsis\">\n                {parentPath ? page.slug?.current : getRootPageSlug(page, config) ?? '/'}\n              </UrlText>\n              {!isDisabled && (isHovered || hasActionOpen) && (\n                <PageTreeViewItemActions\n                  page={page}\n                  onActionOpen={() => setHasActionOpen(true)}\n                  onActionClose={() => setHasActionOpen(false)}\n                />\n              )}\n            </Flex>\n            <PageTreeViewItemStatus isPublished={page.isPublished} isDraft={page.isDraft} />\n          </Item>\n        </ItemContainer>\n        {isOpen && (\n          <ChildContainer>\n            <VerticalLine />\n            {hasChildren && (\n              <Stack paddingY={1} space={2}>\n                {page.children.map(childPage => (\n                  <PageTreeViewItem\n                    key={childPage._id}\n                    page={childPage}\n                    parentPath={path}\n                    onToggle={onToggle}\n                    openItemIds={openItemIds}\n                    disabledItemIds={disabledItemIds}\n                    allowedPageTypes={allowedPageTypes}\n                    forceOpen={forceOpen}\n                    onClick={onClick}\n                  />\n                ))}\n              </Stack>\n            )}\n          </ChildContainer>\n        )}\n      </Stack>\n    </Card>\n  );\n};\n\nconst HorizontalLine = styled('div')`\n  background-color: ${({ theme }) => theme.sanity.color.card.enabled.border};\n  position: absolute;\n  height: 1px;\n  width: 2rem;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n`;\n\nconst VerticalLine = styled('div')`\n  background-color: ${({ theme }) => theme.sanity.color.card.enabled.border};\n  position: absolute;\n  margin-top: -2px;\n  height: calc(100% - 16px);\n  width: 1px;\n  left: 0;\n  top: 0;\n`;\n\nconst ItemContainer = styled(Flex)`\n  position: relative;\n`;\n\nconst Item = styled(Flex)<{ hasMarginLeft: boolean; isSelected: boolean; isDisabled: boolean }>`\n  height: 1.75rem;\n  margin-left: ${({ hasMarginLeft }) => (hasMarginLeft ? '0rem' : '1.5rem')};\n  border-radius: 0.1875rem;\n  background-color: ${({ theme, isDisabled, isSelected }) =>\n    !isDisabled && isSelected ? theme.sanity.color.card.hovered.bg : undefined};\n\n  &:hover {\n    cursor: ${({ isDisabled }) => (!isDisabled ? 'pointer' : undefined)};\n  }\n`;\n\nconst UrlText = styled(Text)<{ isDisabled: boolean }>`\n  min-width: 0;\n  opacity: ${({ isDisabled }) => (isDisabled ? 0.5 : 1)};\n`;\n\nconst ChildContainer = styled(Card)`\n  margin-left: 1.5rem;\n  position: relative;\n`;\n","import { AddIcon, SearchIcon } from '@sanity/icons';\nimport { Box, Button, Flex, Text, TextInput } from '@sanity/ui';\nimport { without } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useClient } from 'sanity';\nimport { useRouter } from 'sanity/router';\nimport styled from 'styled-components';\n\nimport { findPageTreeItemById, flatMapPageTree } from '../helpers/page-tree';\nimport { generateDraftId } from '../helpers/uuid';\nimport { usePageTreeConfig } from '../hooks/usePageTreeConfig';\nimport { NestedPageTreeItem, PageTreeItem } from '../types';\nimport { PageTreeViewItem } from './PageTreeViewItem';\n\nexport type PageTreeEditorProps = {\n  pageTree: NestedPageTreeItem[];\n  onItemClick?: (page: NestedPageTreeItem) => void;\n  disabledItemIds?: string[];\n  initialOpenItemIds?: string[];\n  allowedPageTypes?: string[];\n};\n\ntype PageTreeState = {\n  query: string;\n  openItemIds: string[];\n};\n\nconst PAGE_TREE_STATE_KEY = 'sanity:page-tree-state';\n\nexport const PageTreeEditor = ({\n  pageTree,\n  onItemClick,\n  disabledItemIds,\n  initialOpenItemIds,\n  allowedPageTypes,\n}: PageTreeEditorProps) => {\n  const config = usePageTreeConfig();\n  const client = useClient({ apiVersion: config.apiVersion });\n  const { navigateUrl, resolveIntentLink } = useRouter();\n\n  const [pageTreeState, setPageTreeState] = useState<PageTreeState>(() => {\n    const sessionState = JSON.parse(sessionStorage.getItem(PAGE_TREE_STATE_KEY) || '{}');\n\n    return {\n      query: sessionState.query || '',\n      openItemIds: [...(sessionState.openItemIds || pageTree.map(page => page._id)), ...(initialOpenItemIds || [])],\n    };\n  });\n\n  useEffect(() => {\n    sessionStorage.setItem(PAGE_TREE_STATE_KEY, JSON.stringify(pageTreeState));\n  }, [pageTreeState]);\n\n  /**\n   * Filter page tree results recursively on title/slug based on search query\n   */\n  const filteredPageTree = useMemo(() => {\n    if (!pageTree) return;\n\n    const query = pageTreeState.query.toLowerCase();\n\n    const filter = (pages: NestedPageTreeItem[]): NestedPageTreeItem[] =>\n      pages.reduce((filteredPages: NestedPageTreeItem[], page) => {\n        let shouldInclude = true;\n\n        if (page.children) {\n          const children = filter(page.children);\n          if (children.length) {\n            filteredPages.push({ ...page, children });\n            shouldInclude = false;\n          }\n        }\n\n        if (shouldInclude) {\n          const slugSourceFieldValue = config.titleFieldName ? page[config.titleFieldName] : undefined;\n          const matchesSlug = page.slug?.current?.toLowerCase().includes(query);\n          const matchesTitle =\n            typeof slugSourceFieldValue === 'string' ? slugSourceFieldValue.toLowerCase().includes(query) : false;\n\n          if (matchesSlug || matchesTitle) {\n            filteredPages.push(page);\n          }\n        }\n\n        return filteredPages;\n      }, []);\n\n    return filter(pageTree);\n  }, [pageTree, pageTreeState.query, config.titleFieldName]);\n\n  /**\n   * Toggle page tree item. If item is opened, close it and all its children. If it is closed, just open it.\n   */\n  const togglePage = useCallback(\n    (page: PageTreeItem) => {\n      if (!pageTree) return;\n\n      const index = pageTreeState.openItemIds.indexOf(page._id);\n      // Closed item, open it\n      if (index === -1) {\n        setPageTreeState({ ...pageTreeState, openItemIds: [...pageTreeState.openItemIds, page._id] });\n        // Open item, close it and its children\n      } else {\n        const item = findPageTreeItemById(pageTree, page._id);\n        if (!item) return;\n\n        const childItems = flatMapPageTree([item]);\n        const itemIdsToClose = [item, ...childItems];\n        const newOpenItemIds = without(pageTreeState.openItemIds, ...itemIdsToClose.map(item => item._id));\n\n        setPageTreeState({ ...pageTreeState, openItemIds: newOpenItemIds });\n      }\n    },\n    [pageTreeState, setPageTreeState, pageTree],\n  );\n\n  const addRootPage = useCallback(async () => {\n    const doc = await client.create({\n      _id: generateDraftId(),\n      _type: config.rootSchemaType,\n    });\n    const path = resolveIntentLink('edit', { id: doc._id, type: doc._type });\n\n    navigateUrl({ path });\n  }, [client, config.rootSchemaType, resolveIntentLink, navigateUrl]);\n\n  return (\n    <Flex gap={3} direction=\"column\">\n      <Box>\n        <TextInput\n          icon={SearchIcon}\n          onChange={event => setPageTreeState({ ...pageTreeState, query: event.currentTarget.value })}\n          placeholder=\"Search\"\n          value={pageTreeState.query}\n        />\n      </Box>\n      {filteredPageTree?.length ? (\n        <Flex direction=\"column\">\n          {filteredPageTree.map(page => (\n            <PageTreeViewItem\n              key={page._id}\n              page={page}\n              onToggle={togglePage}\n              openItemIds={pageTreeState.openItemIds}\n              disabledItemIds={disabledItemIds}\n              allowedPageTypes={allowedPageTypes}\n              forceOpen={!!pageTreeState.query}\n              isRoot\n              onClick={onItemClick}\n            />\n          ))}\n        </Flex>\n      ) : (\n        <>\n          <Box paddingX={3} paddingY={3}>\n            <Text>No pages found</Text>\n          </Box>\n          <AddButton mode=\"ghost\" icon={AddIcon} text=\"Add root page\" onClick={addRootPage} />\n        </>\n      )}\n    </Flex>\n  );\n};\n\nconst AddButton = styled(Button)`\n  align-self: flex-start;\n`;\n","import { Card, Flex, Spinner, Stack } from '@sanity/ui';\nimport { forwardRef } from 'react';\nimport { UserComponent } from 'sanity/structure';\n\nimport { usePageTree } from '../hooks/usePageTree';\nimport { PageTreeConfigProvider } from '../hooks/usePageTreeConfig';\nimport { PageTreeConfig } from '../types';\nimport { PageTreeEditor } from './PageTreeEditor';\n\nexport type PageTreeViewProps = {\n  config: PageTreeConfig;\n} & UserComponent['propTypes'];\n\nexport const PageTreeView = forwardRef<HTMLDivElement, PageTreeViewProps>(({ config }, ref) => {\n  const { pageTree } = usePageTree(config);\n\n  return (\n    <PageTreeConfigProvider config={config}>\n      <Stack ref={ref} space={3}>\n        <Card padding={3}>\n          {!pageTree ? (\n            <Flex paddingY={4} justify=\"center\" align=\"center\">\n              <Spinner />\n            </Flex>\n          ) : (\n            <PageTreeEditor pageTree={pageTree} />\n          )}\n        </Card>\n      </Stack>\n    </PageTreeConfigProvider>\n  );\n});\n\nPageTreeView.displayName = 'PageTreeView';\n\nexport const createPageTreeView = (config: PageTreeConfig) => <PageTreeView config={config} />;\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\nexport const useOptimisticState = <S>(state: S): [S, Dispatch<SetStateAction<S | null>>] => {\n  const [optimisticState, setOptimisticState] = useState<S | null>(null);\n\n  useEffect(() => {\n    if (optimisticState === state) {\n      setOptimisticState(null);\n    }\n  }, [state, optimisticState]);\n\n  return [optimisticState ?? state, setOptimisticState];\n};\n","import { Box, Card, Dialog, Flex, Spinner, Stack, Text } from '@sanity/ui';\nimport { useMemo, useState } from 'react';\nimport { ObjectInputProps, ReferenceValue, SanityDocument, set, useFormValue } from 'sanity';\nimport styled from 'styled-components';\n\nimport { findPageTreeItemById, flatMapPageTree } from '../helpers/page-tree';\nimport { useOptimisticState } from '../hooks/useOptimisticState';\nimport { usePageTree } from '../hooks/usePageTree';\nimport { PageTreeConfigProvider } from '../hooks/usePageTreeConfig';\nimport { PageTreeConfig, PageTreeItem } from '../types';\nimport { getSanityDocumentId } from '../utils/sanity';\nimport { PageTreeEditor } from './PageTreeEditor';\n\nexport const PageTreeInput = (\n  props: ObjectInputProps<ReferenceValue> & {\n    config: PageTreeConfig;\n    mode?: 'select-parent' | 'select-page';\n    schemaType: { to?: { name: string }[] };\n  },\n) => {\n  const mode = props.mode ?? 'select-page';\n  const form = useFormValue([]) as SanityDocument;\n  const { pageTree } = usePageTree(props.config);\n\n  const allowedPageTypes = props.schemaType.to?.map(t => t.name);\n\n  const [isPageTreeDialogOpen, setIsPageTreeDialogOpen] = useState(false);\n\n  const parentId = props.value?._ref;\n  const pageId = getSanityDocumentId(form._id);\n\n  const fieldPage = useMemo(() => (pageTree ? findPageTreeItemById(pageTree, pageId) : undefined), [pageTree, pageId]);\n  const parentPage = useMemo(\n    () => (pageTree && parentId ? findPageTreeItemById(pageTree, parentId) : undefined),\n    [pageTree, parentId],\n  );\n\n  const flatFieldPages = useMemo(() => (fieldPage ? flatMapPageTree([fieldPage]) : []), [fieldPage]);\n\n  const [parentPath, setOptimisticParentPath] = useOptimisticState<string | undefined>(parentPage?.path);\n\n  // Some page tree items are not suitable options for a new parent reference.\n  // Disable the current parent page, the current page and all of its children.\n  const disabledParentIds =\n    mode !== 'select-parent' ? [] : [...(parentId ? [parentId] : []), ...flatFieldPages.map(page => page._id)];\n  // Initially open the current page and all of its parents\n  const openItemIds = fieldPage?._id ? [fieldPage?._id] : undefined;\n\n  const openDialog = () => {\n    setIsPageTreeDialogOpen(true);\n  };\n\n  const closeDialog = () => {\n    setIsPageTreeDialogOpen(false);\n  };\n\n  const selectParentPage = (page: PageTreeItem) => {\n    // In the case of an array of references, we need to find the last path in the array and extract the _key\n    const lastPath = props.path[props.path.length - 1];\n    const _key = typeof lastPath === 'object' && '_key' in lastPath ? lastPath._key : undefined;\n\n    props.onChange(\n      set({\n        ...(_key ? { _key } : {}),\n        _ref: page._id,\n        _type: 'reference',\n        _weak: page.isDraft,\n        ...(page.isDraft ? { _strengthenOnPublish: { type: page._type } } : {}),\n      }),\n    );\n    setOptimisticParentPath(page.path);\n    closeDialog();\n  };\n\n  return (\n    <PageTreeConfigProvider config={props.config}>\n      <Stack space={3}>\n        {!pageTree ? (\n          <Flex paddingY={4} justify=\"center\" align=\"center\">\n            <Spinner />\n          </Flex>\n        ) : (\n          <Card padding={1} shadow={1} radius={2}>\n            <SelectedItemCard padding={3} radius={2} onClick={openDialog}>\n              <Text size={2}>{parentId ? parentPath ?? 'Select page' : 'Select page'}</Text>\n            </SelectedItemCard>\n          </Card>\n        )}\n      </Stack>\n      {pageTree && isPageTreeDialogOpen && (\n        <Dialog\n          header={'Select page'}\n          id=\"parent-page-tree\"\n          zOffset={1000}\n          width={1}\n          onClose={closeDialog}\n          onClickOutside={closeDialog}>\n          <Box padding={4}>\n            <PageTreeEditor\n              allowedPageTypes={allowedPageTypes}\n              pageTree={pageTree}\n              onItemClick={selectParentPage}\n              disabledItemIds={disabledParentIds}\n              initialOpenItemIds={openItemIds}\n            />\n          </Box>\n        </Dialog>\n      )}\n    </PageTreeConfigProvider>\n  );\n};\n\nconst SelectedItemCard = styled(Card)`\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.sanity.color.card.hovered.bg};\n  }\n`;\n","import { FormField, ObjectFieldProps, ReferenceValue } from 'sanity';\n\nimport { PageTreeConfig } from '../types';\nimport { PageTreeInput } from './PageTreeInput';\n\nexport const PageTreeField = (\n  props: ObjectFieldProps<ReferenceValue> & {\n    config: PageTreeConfig;\n\n    mode?: 'select-parent' | 'select-page';\n    inputProps: { schemaType: { to?: { name: string }[] } };\n  },\n) => {\n  const inputProps = {\n    config: props.config,\n    mode: props.mode,\n    ...props.inputProps,\n  };\n\n  return (\n    <FormField title={props.title} inputId={props.inputId} validation={props.validation}>\n      <PageTreeInput {...inputProps} />\n    </FormField>\n  );\n};\n","import { ClientPerspective } from 'next-sanity';\nimport { useMemo } from 'react';\nimport { useListeningQuery } from 'sanity-plugin-utils';\n\nimport { getAllPageMetadata } from '../helpers/page-tree';\nimport { getAllRawPageMetadataQuery } from '../queries';\nimport { PageTreeConfig, RawPageMetadata } from '../types';\n\nexport const usePageTreeItem = (documentId: string, config: PageTreeConfig, perspective?: ClientPerspective) => {\n  const { data, loading } = useListeningQuery<RawPageMetadata[]>(getAllRawPageMetadataQuery(config), {\n    options: { apiVersion: config.apiVersion, perspective },\n  });\n\n  const pageTree = useMemo(() => (data ? getAllPageMetadata(config, data) : undefined), [config, data]);\n\n  return {\n    isLoading: loading,\n    page: pageTree?.find(page => page._id === documentId),\n  };\n};\n","import { Stack, Text } from '@sanity/ui';\nimport { Reference, SlugInputProps, SlugValue, useEditState, useFormValue } from 'sanity';\n\nimport { usePageTreeItem } from '../hooks/usePageTreeItem';\nimport { PageTreeConfig } from '../types';\nimport { getSanityDocumentId } from '../utils/sanity';\n\nexport type SlugFieldProps = {\n  config: PageTreeConfig;\n} & SlugInputProps;\n\nexport const SlugField = (props: SlugFieldProps) => {\n  const id = useFormValue(['_id']);\n  const type = useFormValue(['_type']);\n  // eslint-disable-next-line no-warning-comments\n  // TODO ideally this would be more type safe.\n\n  const parentRef = useFormValue(['parent']) as Reference | undefined;\n  const { config, value, renderDefault } = props;\n  return (\n    <Stack space={3}>\n      {renderDefault(props)}\n      {typeof id == 'string' && typeof type == 'string' && !!parentRef?._ref && (\n        <UrlExplanation id={id} type={type} parentId={parentRef?._ref} config={config} value={value} />\n      )}\n    </Stack>\n  );\n};\n\ntype UrlExplanationProps = {\n  id: string;\n  type: string;\n  parentId: string;\n  value: SlugValue | undefined;\n  config: PageTreeConfig;\n};\n\nconst UrlExplanation = ({ id, type, parentId, value, config }: UrlExplanationProps) => {\n  const state = useEditState(getSanityDocumentId(id), type ?? '');\n  const isPublished = !!state.published;\n\n  // we use published perspective so we don't get a draft version of the slug that has been changed of a parent page.\n  const { page, isLoading } = usePageTreeItem(parentId, config, 'published');\n\n  if (isLoading) return null;\n\n  const path = page?.path == '/' ? `${page?.path}${value?.current}` : `${page?.path}/${value?.current}`;\n\n  if (!config.baseUrl) {\n    return (\n      <Text muted size={1}>\n        Page url: {path}\n      </Text>\n    );\n  }\n\n  const url = `${config.baseUrl}${path}`;\n\n  if (!isPublished) {\n    <Text muted size={1}>\n      Page url once published: {url}\n    </Text>;\n  }\n\n  return (\n    <Text muted size={1}>\n      Link to page:\n      <a href={url} target=\"blank\">\n        {url}\n      </a>\n    </Text>\n  );\n};\n","import { Reference, ValidationContext } from 'sanity';\n\nimport { getLanguageFieldName } from '../helpers/config';\nimport { getRawPageMetadataQuery } from '../queries';\nimport { PageTreeConfig, RawPageMetadata } from '../types';\n\n/**\n * Validates that the slug is unique within the parent page and therefore that entire the path is unique.\n */\nexport const parentValidator =\n  (config: PageTreeConfig, ownType: string) =>\n  async (selectedParentRef: Reference | undefined, context: ValidationContext) => {\n    const client = context.getClient({ apiVersion: config.apiVersion });\n\n    if (!selectedParentRef) {\n      return true;\n    }\n\n    const parentId = selectedParentRef._ref;\n    const selectedParent = (await client.fetch<RawPageMetadata[]>(getRawPageMetadataQuery(parentId, config)))[0];\n\n    const allowedParentValidation = allowedParentValidator(selectedParent, config, ownType);\n    if (allowedParentValidation !== true) {\n      return allowedParentValidation;\n    }\n\n    return parentLanguageValidator(selectedParent, config, context);\n  };\n\nconst allowedParentValidator = (selectedParent: RawPageMetadata, config: PageTreeConfig, ownType: string) => {\n  const allowedParents = config.allowedParents?.[ownType];\n\n  if (allowedParents === undefined) {\n    return true;\n  }\n\n  if (!allowedParents.includes(selectedParent._type)) {\n    return `The parent of type \"${selectedParent._type}\" is not allowed for this type of document.`;\n  }\n\n  return true;\n};\n\nconst parentLanguageValidator = (\n  selectedParent: RawPageMetadata,\n  config: PageTreeConfig,\n  context: ValidationContext,\n) => {\n  if (config.documentInternationalization?.documentLanguageShouldMatchParent) {\n    const languageFieldName = getLanguageFieldName(config);\n    const language = context.document?.[languageFieldName];\n    const parentLanguage = selectedParent?.[languageFieldName];\n\n    if (language !== parentLanguage) {\n      return 'The language of the parent must match the language of the document.';\n    }\n  }\n\n  return true;\n};\n","import { SlugValue, ValidationContext } from 'sanity';\n\nimport { DRAFTS_PREFIX } from '../helpers/page-tree';\nimport { getAllRawPageMetadataQuery } from '../queries';\nimport { PageTreeConfig, RawPageMetadata, SanityRef } from '../types';\nimport { getSanityDocumentId } from '../utils/sanity';\n\n/**\n * Validates that the slug is unique within the parent page and therefore that entire the path is unique.\n */\nexport const slugValidator =\n  (config: PageTreeConfig) => async (slug: SlugValue | undefined, context: ValidationContext) => {\n    const client = context.getClient({ apiVersion: config.apiVersion });\n    const parentRef = context.document?.parent as SanityRef | undefined;\n\n    if (!parentRef) {\n      return true;\n    }\n\n    const allPages = await client.fetch<RawPageMetadata[]>(getAllRawPageMetadataQuery(config));\n    const siblingPages = allPages.filter(page => page.parent?._ref === parentRef._ref);\n\n    const siblingPagesWithSameSlug = siblingPages\n      .filter(\n        page => getSanityDocumentId(page._id) !== (context.document?._id && getSanityDocumentId(context.document._id)),\n      )\n      .filter(page => page.slug?.current?.toLowerCase() === slug?.current?.toLowerCase());\n\n    if (siblingPagesWithSameSlug.length) {\n      // If there is a sibling page with the same slug published, but a different slug in a draft, we want to show a more specific validation error to the user instead.\n      const siblingDraftPageWithSameSlug = siblingPages.find(\n        page =>\n          page._id.startsWith(DRAFTS_PREFIX) &&\n          page._id.includes(siblingPagesWithSameSlug[0]._id) &&\n          page.slug?.current?.toLowerCase() !== slug?.current?.toLowerCase(),\n      );\n\n      return siblingDraftPageWithSameSlug\n        ? `Slug must be unique. Another page with the same slug is already published, but has a draft version with a  different slug: \"${siblingDraftPageWithSameSlug.slug?.current}\". Publish that page first or change the slug to something else.`\n        : 'Slug must be unique.';\n    }\n\n    return true;\n  };\n","import { compact } from 'lodash';\nimport { defineField, defineType, DocumentDefinition, SlugOptions } from 'sanity';\n\nimport { PageTreeField } from '../components/PageTreeField';\nimport { SlugField } from '../components/SlugField';\nimport { PageTreeConfig } from '../types';\nimport { parentValidator } from '../validators/parent-validator';\nimport { slugValidator } from '../validators/slug-validator';\n\ntype Options = {\n  isRoot?: boolean;\n  fieldsGroupName?: string;\n  slugSource?: SlugOptions['source'];\n};\n\nfunction getPossibleParentsFromConfig(config: PageTreeConfig, ownType: DocumentDefinition): string[] {\n  if (config.allowedParents !== undefined && ownType.name in config.allowedParents) {\n    return config.allowedParents[ownType.name];\n  }\n  return config.pageSchemaTypes;\n}\n\nexport const definePageType = (\n  type: DocumentDefinition,\n  config: PageTreeConfig,\n  options: Options = { isRoot: false },\n) => {\n  const slugSourceFieldName = getSlugSourceField(config, options);\n\n  let slugSourceField;\n  let typeFields = type.fields;\n  if (slugSourceFieldName) {\n    slugSourceField = type.fields.find(field => field.name === slugSourceFieldName);\n    typeFields = type.fields.filter(field => field.name !== slugSourceFieldName);\n  }\n\n  return defineType({\n    ...type,\n    title: type.title,\n    fields: compact([slugSourceField, ...basePageFields(config, options, type), ...typeFields]),\n  });\n};\n\nconst basePageFields = (config: PageTreeConfig, options: Options, ownType: DocumentDefinition) => [\n  ...(!options.isRoot\n    ? [\n        defineField({\n          name: 'slug',\n          title: 'Slug',\n          type: 'slug',\n          options: {\n            source: getSlugSourceField(config, options),\n            isUnique: () => true,\n          },\n          components: {\n            input: props => SlugField({ ...props, config }),\n          },\n          validation: Rule => Rule.required().custom(slugValidator(config)),\n          group: options.fieldsGroupName,\n        }),\n      ]\n    : []),\n  ...(!options.isRoot\n    ? [\n        defineField({\n          name: 'parent',\n          title: 'Parent page',\n          type: 'reference',\n          to: getPossibleParentsFromConfig(config, ownType).map(type => ({ type })),\n          validation: Rule => Rule.required().custom(parentValidator(config, ownType.name)),\n          group: options.fieldsGroupName,\n          components: {\n            field: props => PageTreeField({ ...props, config, mode: 'select-parent' }),\n          },\n        }),\n      ]\n    : []),\n];\n\nconst getSlugSourceField = (config: PageTreeConfig, options: Options) => config.titleFieldName ?? options.slugSource;\n","import { DocumentList, StructureBuilder } from 'sanity/structure';\n\nimport { createPageTreeView } from './components/PageTreeView';\nimport { PageTreeDocumentListOptions } from './types';\n\nexport { PageTreeField } from './components/PageTreeField';\nexport { PageTreeInput } from './components/PageTreeInput';\nexport { definePageType } from './schema/definePageType';\nexport type { PageTreeConfig, PageTreeDocumentListOptions } from './types';\n\n/**\n * Creates a custom document list for the page tree.\n * @param S - Structure builder\n * @param config - Page tree config\n * @param extendDocumentList - Optional function to extend the document list builder to add custom title, filter etc.\n * @public\n */\nexport const createPageTreeDocumentList = (\n  S: StructureBuilder,\n  { config, extendDocumentList }: PageTreeDocumentListOptions,\n): DocumentList => {\n  const documentList = extendDocumentList ? extendDocumentList(S.documentList()) : S.documentList();\n\n  return Object.assign(\n    documentList.filter(`_type in [${config.pageSchemaTypes.map(type => `\"${type}\"`).join(',')}]`).serialize(),\n    {\n      // Prevents the component from re-rendering when switching documents\n      __preserveInstance: true,\n      key: 'pageTree',\n      type: 'component',\n      component: createPageTreeView(config),\n    },\n  );\n};\n"],"names":["usePageTree","config","data","loading","useListeningQuery","getAllRawPageMetadataQuery","options","apiVersion","pageTree","useMemo","mapRawPageMetadatasToPageTree","isLoading","PageTreeConfigContext","createContext","PageTreeConfigProvider","_ref","children","jsx","Provider","value","usePageTreeConfig","useContext","Error","generateDraftId","concat","uuid","PageTreeViewItemActions","_ref2","page","onActionOpen","onActionClose","schema","useSchema","client","useClient","navigateUrl","resolveIntentLink","useRouter","newPage","setNewPage","useState","onAdd","type","language","getLanguageFieldName","doc","create","_id","_type","parent","rootSchemaType","_weak","_strengthenOnPublish","useEffect","path","id","menuButtons","pageSchemaTypes","filter","_a","_b","_c","allowedParents","includes","map","MenuItem","onClick","text","get","title","isAddPageButtonDisabled","length","tooltipContent","Box","padding","Text","muted","size","Tooltip","content","fallbackPlacements","placement","portal","Flex","gap","style","flexShrink","e","stopPropagation","MenuButton","button","Button","mode","paddingX","paddingY","fontSize","icon","AddIcon","disabled","menu","Menu","popover","onOpen","onClose","TOOLTIP_PROPS","PageTreeViewItemStatus","_ref3","isPublished","isDraft","theme","useTheme","jsxs","OpacityBox","opacity","PublishIcon","color","sanity","positive","enabled","fg","EditIcon","caution","styled","__template","props","_d","_e","_f","PageTreeViewItem","_ref4","parentPath","onToggle","openItemIds","disabledItemIds","allowedPageTypes","forceOpen","isRoot","_g","navigateIntent","routerPanesState","groupIndex","usePaneRouter","isHovered","setIsHovered","hasActionOpen","setHasActionOpen","toggle","onItemClick","isDisabled","openPage","slug","current","hasChildren","currentPageNumber","isSelected","some","isOpen","flatPages","flatMapPageTree","flatPageIds","p","Card","Stack","flex","ItemContainer","align","HorizontalLine","paddingLeft","ChevronUpIcon","ChevronDownIcon","Item","justify","hasMarginLeft","onMouseEnter","onMouseLeave","UrlText","textOverflow","getRootPageSlug","ChildContainer","VerticalLine","space","childPage","_ref5","card","border","_ref6","_ref7","_ref8","hovered","bg","_ref9","default","_ref10","PAGE_TREE_STATE_KEY","PageTreeEditor","_ref11","initialOpenItemIds","pageTreeState","setPageTreeState","sessionState","JSON","parse","sessionStorage","getItem","query","setItem","stringify","filteredPageTree","toLowerCase","pages","reduce","filteredPages","shouldInclude","push","slugSourceFieldValue","titleFieldName","matchesSlug","matchesTitle","togglePage","useCallback","index","indexOf","item","findPageTreeItemById","childItems","itemIdsToClose","newOpenItemIds","without","addRootPage","direction","TextInput","SearchIcon","onChange","event","currentTarget","placeholder","Fragment","AddButton","PageTreeView","forwardRef","_ref12","ref","Spinner","displayName","createPageTreeView","useOptimisticState","state","optimisticState","setOptimisticState","PageTreeInput","form","useFormValue","schemaType","to","t","name","isPageTreeDialogOpen","setIsPageTreeDialogOpen","parentId","pageId","getSanityDocumentId","fieldPage","parentPage","flatFieldPages","setOptimisticParentPath","disabledParentIds","openDialog","closeDialog","selectParentPage","lastPath","_key","set","shadow","radius","SelectedItemCard","Dialog","header","zOffset","width","onClickOutside","_ref13","PageTreeField","inputProps","FormField","inputId","validation","usePageTreeItem","documentId","perspective","getAllPageMetadata","find","SlugField","parentRef","renderDefault","UrlExplanation","_ref14","useEditState","baseUrl","url","href","target","parentValidator","ownType","selectedParentRef","context","getClient","selectedParent","fetch","getRawPageMetadataQuery","allowedParentValidation","allowedParentValidator","parentLanguageValidator","documentInternationalization","documentLanguageShouldMatchParent","languageFieldName","document","parentLanguage","slugValidator","allPages","siblingPages","siblingPagesWithSameSlug","siblingDraftPageWithSameSlug","startsWith","DRAFTS_PREFIX","getPossibleParentsFromConfig","definePageType","slugSourceFieldName","getSlugSourceField","slugSourceField","typeFields","fields","field","defineType","compact","basePageFields","defineField","source","isUnique","components","input","Rule","required","custom","group","fieldsGroupName","slugSource","createPageTreeDocumentList","S","_ref15","extendDocumentList","documentList","Object","assign","join","serialize","__preserveInstance","key","component"],"mappings":"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"}