{"version":3,"file":"index-DHD1e6p-.js","sources":["../../src/utils/sanity.ts","../../src/helpers/config.ts","../../src/helpers/page-tree.ts","../../src/queries/index.ts"],"sourcesContent":["export const DRAFTS_PREFIX = 'drafts.';\n\n/**\n * Strips draft id prefix from Sanity document id when draft id is provided.\n */\nexport const getSanityDocumentId = (val: string) => val.replace(DRAFTS_PREFIX, '');\n","import { PageTreeConfig, RawPageMetadata } from '../types';\n\nexport const getLanguageFieldName = (config: PageTreeConfig) =>\n  config.documentInternationalization?.languageFieldName ?? 'language';\n\nexport const getRootPageSlug = (page: RawPageMetadata, config: PageTreeConfig) => {\n  if (!config.documentInternationalization) return;\n\n  const language = page[getLanguageFieldName(config)];\n  if (typeof language != 'string') {\n    throw new Error(`Language field is not a string: ${language}`);\n  }\n  return language;\n};\n","import { groupBy, omit, orderBy, sortBy } from 'lodash';\n\nimport {\n  NestedPageTreeItem,\n  PageMetadata,\n  PageTreeConfig,\n  PageTreeItem,\n  RawPageMetadata,\n  RawPageMetadataWithPublishedState,\n} from '../types';\nimport { getSanityDocumentId } from '../utils/sanity';\nimport { getLanguageFieldName, getRootPageSlug } from './config';\n\nexport const DRAFTS_PREFIX = 'drafts.';\n\n/**\n * Maps array of raw page metadata objects to page metadata object array containing resolved id, path and type.\n */\nexport const getAllPageMetadata = (config: PageTreeConfig, pages: RawPageMetadata[]): PageMetadata[] => {\n  const pageTree = mapRawPageMetadatasToPageTree(config, pages);\n  const flatPageTree = flatMapPageTree(pageTree);\n\n  return flatPageTree.map(page => ({\n    _id: page._id,\n    _updatedAt: page._updatedAt,\n    path: page.path,\n    type: page._type,\n  }));\n};\n\n/**\n * Finds a page from an array of page tree items by the given page id.\n */\nexport const findPageTreeItemById = (pages: NestedPageTreeItem[], id: string): NestedPageTreeItem | undefined => {\n  for (const page of pages) {\n    if (page._id === id) return page;\n\n    if (page.children) {\n      const childPage = findPageTreeItemById(page.children, id);\n      if (childPage) return childPage;\n    }\n  }\n};\n\n/**\n * Maps pages to page tree containing recursive nested children.\n */\nexport const mapRawPageMetadatasToPageTree = (\n  config: PageTreeConfig,\n  pages: RawPageMetadata[],\n): NestedPageTreeItem[] => {\n  const pagesWithPublishedState = getPublishedAndDraftRawPageMetadata(config, pages);\n\n  const orderedPages = orderBy(mapPageTreeItems(config, pagesWithPublishedState), 'path');\n  const { documentInternationalization } = config;\n  if (documentInternationalization) {\n    const languageField = getLanguageFieldName(config);\n\n    return sortBy(orderedPages, p => {\n      let index = documentInternationalization.supportedLanguages.indexOf((p[languageField] as string)?.toLowerCase());\n      if (index === -1) {\n        index = documentInternationalization.supportedLanguages.length;\n      }\n      return index;\n    });\n  }\n  return orderedPages;\n};\n\n/**\n * Recursively flattens page tree to flat array of pages.\n */\nexport const flatMapPageTree = (pages: NestedPageTreeItem[]): PageTreeItem[] =>\n  pages.flatMap(page =>\n    page.children ? [omit(page, 'children') as PageTreeItem, ...flatMapPageTree(page.children)] : page,\n  );\n\n/**\n * Maps pages to page tree containing recursive nested children and pahts.\n */\nconst mapPageTreeItems = (\n  config: PageTreeConfig,\n  pagesWithPublishedState: RawPageMetadataWithPublishedState[],\n  parentId?: string,\n  parentPath: string = '',\n): NestedPageTreeItem[] => {\n  const getChildPages = (parentId: string | undefined) =>\n    pagesWithPublishedState.filter(page => page.parent?._ref === parentId);\n\n  return getChildPages(parentId).map(page => {\n    const pagePath = parentPath\n      ? `${parentPath === '/' ? '' : parentPath}/${page.slug?.current}`\n      : `/${getRootPageSlug(page, config) ?? ''}`;\n    const children = orderBy(mapPageTreeItems(config, pagesWithPublishedState, page._id, pagePath), 'path');\n\n    return {\n      ...page,\n      children,\n      path: pagePath,\n    };\n  });\n};\n\n/**\n * Provides draft and published status. Filters out duplicate pages with the same id and invalid pages.\n */\nconst getPublishedAndDraftRawPageMetadata = (\n  config: PageTreeConfig,\n  pages: RawPageMetadata[],\n): RawPageMetadataWithPublishedState[] => {\n  const publishedPages = groupBy(\n    pages.filter(p => !p._id.startsWith(DRAFTS_PREFIX)),\n    p => p._id,\n  );\n  const draftPages = groupBy(\n    pages.filter(p => p._id.startsWith(DRAFTS_PREFIX)),\n    p => getSanityDocumentId(p._id),\n  );\n\n  return pages\n    .filter(page => isValidPage(config, page))\n    .filter(p => !draftPages[p._id]) // filter out published versions for pages which have a draft\n    .map(p => {\n      const isDraft = p._id.startsWith(DRAFTS_PREFIX);\n      const _idWithoutDraft = getSanityDocumentId(p._id);\n      const newPage: RawPageMetadataWithPublishedState = {\n        ...p,\n        _id: isDraft ? _idWithoutDraft : p._id,\n        isDraft,\n        isPublished: !!publishedPages[_idWithoutDraft],\n      };\n      return newPage;\n    });\n};\n\nconst isValidPage = (config: PageTreeConfig, page: RawPageMetadata): boolean => {\n  if (!page.parent || !page.slug) {\n    if (page._type !== config.rootSchemaType) {\n      return false;\n    }\n  }\n  return true;\n};\n","import { getLanguageFieldName } from '../helpers/config';\nimport { PageTreeConfig } from '../types';\n\nexport const getAllRawPageMetadataQuery = (config: PageTreeConfig) => `*[_type in [${Object.values(\n  config.pageSchemaTypes,\n)\n  .map(key => `\"${key}\"`)\n  .join(', ')}]]{\n    ${rawPageMetadataFragment(config)}\n  }`;\n\nexport const getRawPageMetadataQuery = (documentId: string, config: PageTreeConfig) => `*[_id == \"${documentId}\"]{\n  ${rawPageMetadataFragment(config)}\n}`;\n\nexport const rawPageMetadataFragment = (config: PageTreeConfig) => `\n    _id,\n    _type,\n    _updatedAt,\n    parent,\n    slug,\n    title,\n    ${getLanguageFieldName(config) ?? ''}`;\n"],"names":["DRAFTS_PREFIX","getSanityDocumentId","val","replace","getLanguageFieldName","config","_a","_b","documentInternationalization","languageFieldName","getRootPageSlug","page","language","Error","concat","getAllPageMetadata","pages","pageTree","mapRawPageMetadatasToPageTree","flatPageTree","flatMapPageTree","map","_id","_updatedAt","path","type","_type","findPageTreeItemById","id","children","childPage","pagesWithPublishedState","getPublishedAndDraftRawPageMetadata","orderedPages","orderBy","mapPageTreeItems","languageField","sortBy","p","index","supportedLanguages","indexOf","toLowerCase","length","flatMap","omit","parentId","parentPath","getChildPages","filter","parent","_ref","pagePath","slug","current","publishedPages","groupBy","startsWith","draftPages","isValidPage","isDraft","_idWithoutDraft","newPage","isPublished","rootSchemaType","getAllRawPageMetadataQuery","Object","values","pageSchemaTypes","key","join","rawPageMetadataFragment","getRawPageMetadataQuery","documentId"],"mappings":"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"}